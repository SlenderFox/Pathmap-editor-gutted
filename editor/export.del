import 'main.del';
import 'map languages.del';

globalvar Number exportButton!;

void ExportMenu() 'EXPORT: create export menu'
{
	setMainLabel("main / export");

	exportButton = createButton(
		label: 'Generate code',
		posY: -0.9,
		clickWidth: 3,
		defaultColor: Color.Green,
		onClick: left => {
			Export();
		}
	);

	buttonCollectionMain += [exportButton];
}

rule: 'EXPORT: open export menu'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.Export)
{
	SetMenuState(MenuState.Export);
}

void Export() playervar 'Subroutine: Generate map code.'
{
	StartLongRunningTask('Exporting, please wait...');

	# Enable inspector so we can log the exported code to it.
	EnableInspector();

	# Regex to filter out the timestamps
	LogToInspector('Regex: "[\n]*\[[\d:]*\] "');

	# Export introduction.
	LogToInspector('// Place the following text into your ostw script:');

	# Export map to ostw.
	ExportMapToOstw();

	# Disable inspector.
	DisableInspector();

	EndLongRunningTask();
}

void ExportMapToOstw()
{
	# This exported code should be placed in the ostw file.
	LogToInspector(ExportOstwDataSet("nodes"));
	LogToInspector(ExportOstwDataSet("neighbors"));

	# Introduction message
	LogToInspector(<'// Place the following text into a file named \"<0>.jsonc\":', CurrentMap()>);

	# Export Ostw nodes
	LogToInspector('\n{ "nodes": [');
	ExportArray(Nodes, 10, (wn, isLast) => ExportJsonVector(wn.Node.Position, isLast));
	# Export Ostw segments
	LogToInspector('\n], "neighbors": [');
	ExportNeighborsPattern('[', ']', '[]');
	# Conclude JSON
	LogToInspector('\n] }');
}

# Exports the segments and attributes in a nicely optimized way.
# - `beginArray`: The term used to begin an array in the intended output language.
# - `endArray`: The term used to end an array in the intended output language.
# - `emptyArray`: The term used to create an empty array in the intended output language.
void ExportNeighborsPattern(String beginArray, String endArray, String emptyArray) playervar 'Subroutine: Export Neighbors Pattern'
{
	DisableInspectorRecording();
	# For each attribute
	for (Number n = 0; Nodes.Length; 1)
	{
		# Get connected segments.
		Number[] connected = Segments
			.Map((s, i) => i)
			.FilteredArray(i => Segments[i].Node1 == Nodes[n].Node.UniqueID || Segments[i].Node2 == Nodes[n].Node.UniqueID);
		String neighborString: StringJoin(connected, ',', si =>
		{
			# Find the attributes from node A to node B.
			# The core pathfinding code travels from the goal to the player's position,
			# so attr.Node1 and attr.Node2 are flipped here.
			Number[] attributes = Attributes
				.FilteredArray(attr => Nodes[n].Node.UniqueID == attr.Node2 && (attr.Node1 == Segments[si].Node1 || attr.Node1 == Segments[si].Node2))
				.Map(attr => attr.Value);

			# If there are no attributes, use the empty array term.
			String attrString = emptyArray;
			if (attributes.Length != 0) {
				attrString = <'<0><1><2>', beginArray, StringJoin(attributes, ',', v => v), endArray>;
			}

			return <'<0><1>, <2><3>',
				beginArray,
				NodeIndexFromID(Segments[si].Node1 == Nodes[n].Node.UniqueID ? Segments[si].Node2 : Segments[si].Node1),
				attrString,
				endArray>;
		});
		EnableInspectorRecording();
		LogToInspector(<'\n<0><1><2><3>', beginArray, neighborString, endArray, n == Nodes.Length - 1 ? '' : ','>);
		DisableInspectorRecording();
		Wait(0.03);
	}
	EnableInspectorRecording();
}

playervar String exportArrayStub;
playervar Number exportArrayNumA;
playervar Number exportArrayNumB;
void ExportArray<T>(in T[] array, in Number step, const (T, Boolean) => String valueToString)
{
	for (exportArrayNumA = 0; array.Length; step) {
		exportArrayStub = '';
		for (exportArrayNumB = exportArrayNumA; Min(exportArrayNumA + step, array.Length); 1) {
			exportArrayStub = exportArrayStub + valueToString(array[exportArrayNumB], exportArrayNumB == array.Length - 1);
		}
		LogToInspector('\n{0}'.Format([exportArrayStub]));
		MinWait();
	}
}

String StringJoin<T>(in T[] array, in String joinValue, const T => Any tToString)
{
	String joinStringResult! = '';
	for (Number joinStringI! = 0; array.Length; 1)
	{
		joinStringResult = <'<0><1><2>', joinStringResult, tToString(array[joinStringI]), joinStringI != array.Length - 1 ? joinValue : ''>;
		MinWait();
	}
	return joinStringResult;
}

String ExportJsonVector(in Vector vector, in Boolean isLast)
{
	return <'{"x":<0>, "y":<1>, "z":<2>}<3>', vector.X, vector.Y, vector.Z, isLast ? '' : ', '>;
}

String ExportOstwDataSet(in String setName)
{
	return <'\nrule: "【Map】<0> (<1>)"\n', CurrentMap(), setName> +
		<'if (CurrentMap() == Map.<0>) {\n', mapNameToOstwName(CurrentMap())> +
		<'    pfLoadedMap.<1> = import("<0>.jsonc").<1>;\n}', CurrentMap(), setName>;
}
