import 'main.del';

playervar MenuState menuState!;
playervar Number freecamSwitchID!;
playervar Number linkModeID!;
playervar Number attributeDescriptionButton!;
playervar NumberSelector attributeSelector!;
playervar Number mainText!;
globalvar Number undoText! = -1;
globalvar Number redoText! = -1;
# If this is not zero, then a long running task is being executed. This means that modifications to the map should be disabled.
globalvar Number longRunningTask!;
Boolean canModifyMap: !longRunningTask;

# Contains a list of buttons that are destroyed when the menu state changes.
playervar Number[] buttonCollectionMain = [];

enum MenuAction
{
	Back = 1,
	FreecamIncrement = 2,
	FreecamDecrement = 3,
	Undo = 4,
	Redo = 5,
	LinkMode = 6,
	AttributeIncrement = 7,
	AttributeIncrementBig = 8,
	AttributeDecrement = 9,
	AttributeDecrementBig = 10,
	AddDummy = 11,
	ChooseHero = 12,
	RuleMenu = 13,
	RuleNext = 14,
	RulePrevious = 15,
	CreateRule = 16,
	AddAction = 17,
	ScrollbarUp = 18,
	ScrollbarDown = 19,
	ScrollbarItem = 20,
	WaitTimeUp = 21,
	WaitTimeDown = 22,
	WaitTimeUpBig = 23,
	WaitTimeDownBig = 24,
	WaitConfirm = 25,
	DeleteAction = 26,
	PathfinderSettings = 27,
	AddOrRemovePathfindingAttribute = 28,
	ToggleAll = 29,
	Guide = 30,
	Export = 31,
	ExportWorkshop = 32,
	ExportOstw = 33,
	ExportOverpy = 34,
	FuncPrimary = 35,
	FuncSecondary = 36
}

enum MenuState
{
	None,
	Main,
	ChooseHero,
	Rules,
	AddAction,
	ChooseWaitLength,
	PathfinderSettings,
	Guide,
	Export,
	ConfirmMirror,
	LongRunningTask
}

rule: 'CM: Make buttons: Main'
Event.OngoingPlayer
if (isHost)
{
	for (define b = 0; 2; 1)
	{
		String s! = '';
		for (define c = 0; 13; 1)
		{
			s = <'<0><1>', s, '▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n'>;
			MinWait();
		}
		createButton(s, defaultColor: Color.Black, posX: 0, posY: -.9-b*.1, interactable: false);
	}

	SetMenuState(MenuState.Main);

	mainText = createButton(
		'main',
		scale: 2,
		posX: 0,
		posY: 1.15,
		defaultColor: Color.Gray,
		interactable: false);
	createButton(
		'back',
		primaryAction: MenuAction.Back,
		scale: 2,
		posX: -2,
		posY: 1,
		clickWidth: 0.4,
		defaultColor: Color.Red);
	createButton('▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒', defaultColor: Color.Black, posX: 0, posY: 1.375, interactable: false);
	createButton('♡              ♡', defaultColor: Color.Red, posX: 0, posY: 1.375, interactable: false);
	createButton('ｈ  ｐ  ／  ｏ  ｉ  ｏ   ｄ  ｔ\n               ', posX: .15, posY: 1.375 - .17, interactable: false);
	createButton('ｔ  ｓ  ／  －   ．  ｍ  ｅ  ｉ\n               ', posX: .23, posY: 1.375 - .17, interactable: false);
	createButton('ｔ  ：  ｋ  ｆ ｃ    ／  ｌ  ｎ\n               ', posX: .31, posY: 1.375 - .17, interactable: false);
	// createButton('ｈｔ ｓ／ｋ  - ｉ  ｏ ／ｅｔｎ\n               ', posX: .15, posY: 1.375 - .17, interactable: false);
	// createButton('ｔｐ ：／ｏ ｆ.ｃ ｍｄｌｉ\n               ', posX: .23, posY: 1.375 - .17, interactable: false);
}

void SetMenuState(MenuState newState) '(Subroutine) CM: Update menu'
{
	if (newState == menuState) return;

	// Cleanup
	if (attributeSelector)
	{
		attributeSelector.Dispose();
		attributeSelector = null;
	}

	destroyButtonCollection(buttonCollectionMain);

	if (menuState == MenuState.Rules)
		DestroyPager();

	menuState = newState;

	// Undo/redo
	if (newState == MenuState.Main || newState == MenuState.Rules)
	{
		if (undoText == -1)
		{
			undoText = createButton(
				'← undo',
				primaryAction: MenuAction.Undo,
				scale: 2,
				posX: -2.1,
				posY: -1,
				clickWidth: 0.4,
				clickHeight: 0.3,
				defaultColor: Color.Yellow);
			redoText = createButton(
				'redo →',
				primaryAction: MenuAction.Redo,
				scale: 2,
				posX: -1.5,
				posY: -1,
				clickWidth: 0.4,
				clickHeight: 0.3,
				defaultColor: Color.Aqua);
			UpdateUndoInteractability();
		}
	}
	else if (undoText != -1)
	{
		DestroyButton(undoText);
		DestroyButton(redoText);
		undoText = -1;
		redoText = -1;
	}

	// Setup
	if (newState == MenuState.Main)
	{
		buttonCollectionMain += createButton(
			<'            add dummy bot <0>', AbilityIconString(Hero.Echo, Button.Ultimate)>,
			primaryAction: MenuAction.AddDummy,
			scale: 2.5,
			posX: 1.5,
			posY: .4,
			clickWidth: 1.7,
			defaultColor: Color.White);

		buttonCollectionMain += createButton(
			<'                      Rule editor <0>', AbilityIconString(Hero.Torbjorn, Button.Ability2)>,
			primaryAction: MenuAction.RuleMenu,
			scale: 2.5,
			posX: 1.5,
			posY: 0.8,
			clickWidth: 1.7,
			defaultColor: Color.White);

		buttonCollectionMain += createButton(
			<'pathfinder settings <0>', AbilityIconString(Hero.Kiriko, Button.Ability1)>,
			primaryAction: MenuAction.PathfinderSettings,
			scale: 2.5,
			posX: 1.5,
			posY: 0.2,
			clickWidth: 1.7,
			defaultColor: Color.White);

		buttonCollectionMain += createButton(
			<'                                Export <0>', AbilityIconString(Hero.Bastion, Button.Ability1)>,
			primaryAction: MenuAction.Export,
			scale: 2.5,
			clickWidth: 1.7,
			posX: 1.5,
			posY: .6,
			defaultColor: Color.White);

		freecamSwitchID = createButton(
			'noclip: off',
			primaryAction: MenuAction.FreecamIncrement,
			secondaryAction: MenuAction.FreecamDecrement,
			scale: 2.5,
			posX: -1.7,
			posY: 0.6,
			clickWidth: 1.0,
			defaultColor: Color.White);

		linkModeID = createButton(
			null,
			posX: -1.5,
			posY: 0,
			clickWidth: 1.7,
			onClick: l => {
				attributeMode = !attributeMode;
				updateSegmentModeLabel();
			});

		attributeDescriptionButton = createButton(
			label: ' Attribute:',
			posX: -1.7,
			posY: -0.2,
			interactable: false
		);

		buttonCollectionMain += createButton(
			'Mirror map',
			onClick: _ => openMirrorConfirmationScreen(),
			posX: -1.7,
			posY: 0.3,
			clickWidth: 1.0,
			defaultColor: Color.White);

		attributeSelector = new NumberSelector(attribute, posX: -.95, posY: -0.2, true, value => attribute = value);
		buttonCollectionMain += [freecamSwitchID, linkModeID, attributeDescriptionButton];

		updateFreecamLabel();
		updateSegmentModeLabel();
	}
	else if (newState == MenuState.Rules)
		SetupRuleMenu();
	else if (newState == MenuState.Export)
		ExportMenu();
}

rule: 'CM: Freecam increment'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.FreecamIncrement)
{
	IsNoclipping = !IsNoclipping;
	updateFreecamLabel();
}

rule: 'CM: Undo'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.Undo)
if (CanUndo)
{
	Undo();
}

rule: 'CM: Redo'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.Redo)
if (CanRedo)
{
	Redo();
}

void UpdateUndoInteractability() globalvar 'CM: Update undo interactability'
{
	if (undoText != -1)
	{
		SetInteractabilityAndColor(undoText, CanUndo, CanUndo ? Color.Aqua : Color.Gray, HostPlayer());
		SetInteractabilityAndColor(redoText, CanRedo, CanRedo ? Color.Yellow : Color.Gray, HostPlayer());
	}
}

rule: 'CM: Change link mode'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.LinkMode)
{
	attributeMode = !attributeMode;
}

rule: 'CM: Add dummy'
Event.OngoingPlayer
if (cm_currActionID == MenuAction.AddDummy)
{
	chooseHeroMenu(hero => {
		editorState = EditorState.PlaceDummy;
		placingDummyHero = hero;
	});
}

void updateFreecamLabel() '(Subroutine) CM: Update freecam label'
{
	SetLabel(freecamSwitchID, IsNoclipping ? 'noclip: on' : 'noclip: off');
}

void updateSegmentModeLabel() '(Subroutine) CM: Update segment mode label'
{
	SetLabel(linkModeID, !attributeMode ? 'Connect: Paths' : '          Connect: Attributes');
	SetColor(attributeDescriptionButton, attributeMode ? CustomColor(240, 240, 240, 255) : Color.Gray);
	if (attributeSelector)
		attributeSelector.SetInteractable(attributeMode);
}

void destroyButtonCollection(ref Number[] buttonCollection)
{
	while (buttonCollection.Length)
	{
		DestroyButton(buttonCollection.First);
		buttonCollection.ModRemoveByIndex(0);
	}
}

void setMainLabel(String label) '(Subroutine) CM: Set main label'
{
	SetLabel(mainText, label);
}

globalvar Hero => void chooseHeroCallback!;

void chooseHeroMenu(Hero => void callback) playervar '(Subroutine) CM: Choose hero'
{
	SetMenuState(MenuState.ChooseHero);

	for (Number i = 0; AllHeroes().Length; 1)
	{
		buttonCollectionMain += createButton(
			label: HeroIconString(AllHeroes()[i]),
			primaryAction: [MenuAction.ChooseHero, AllHeroes()[i]],
			posX: -2 + (i % 13) / 3,
			posY: 0.5 - (i / 13 ~ Floor()) / 2,
			scale: 5
		);
	}

	chooseHeroCallback = callback;
}

rule: 'CM: Hero ready'
Event.OngoingPlayer
if (cm_currActionID[0] == MenuAction.ChooseHero)
if (chooseHeroCallback)
{
	chooseHeroCallback(cm_currActionID[1]);
	SetMenuState(MenuState.Main);
	chooseHeroCallback = null;
	cm_isInMenu = false;
	releasePrimary = true;
}

void StartLongRunningTask(String message) 'Subroutine: Start Long Running Task'
{
	longRunningTask++;
	cm_isInMenu = true;
	SetMenuState(MenuState.LongRunningTask);
	buttonCollectionMain += createButton(message, interactable: false);
}

void EndLongRunningTask()
{
	longRunningTask--;
	SetMenuState(MenuState.Main);
}
